name: CD Check NLnet Labs Unbound Release Pre Flight Check
             
on:
  push:
    branches: [ main ]
    paths:
      - '!**'
      - '.github/workflows/manually-build-unbound.yaml'
      
#  schedule:
#    - cron: '0 8 1 3 ? 2024' # only start once at 1.3.2024 8:00 UTC
    
jobs:
  unbound-update:
    runs-on: ubuntu-latest
    steps:
      - name: Get versions
        id: GET_VERSIONS
        run: |
          if [[ "$(curl -s https://api.github.com/repos/NLnetLabs/unbound/releases | jq '.[0] | .prerelease')" -eq 1 ]]; then
            echo "Pre-release, skipping"
            exit 1
          else
            echo UNBOUND_VERSION="$(curl -s https://api.github.com/repos/NLnetLabs/unbound/releases | jq '.[0] | .name' -r | grep -Eo '([0-9]+)(\.?[0-9]+)*' | head -1)" >> $GITHUB_OUTPUT
            echo UNBOUND_DOCKER_VERSION="$(curl -s https://api.github.com/repos/madnuttah/unbound-docker/releases | jq '.[0] | .name' -r | grep -Eo '([0-9]+)(\.?[0-9]+)*' | head -1)" >> $GITHUB_OUTPUT     
            echo UNBOUND_DOCKER_IMAGE_VERSION="$(curl -s https://api.github.com/repos/madnuttah/unbound-docker/releases | jq '.[0] | .name' -r)" >> $GITHUB_OUTPUT
          fi

      - name: Is update available
        id: IS_UPDATE_AVAILABLE
        run: |
          if [[ "${{ steps.GET_VERSIONS.outputs.UNBOUND_VERSION }}" != "${{ steps.GET_VERSIONS.outputs.UNBOUND_DOCKER_VERSION }}" ]]; then
            echo "No update found"
            exit 1
          else
            echo "Update found"          
            echo IMAGE_BUILD_DATE="$(date -u)" >> $GITHUB_OUTPUT
            echo UNBOUND_SHA256="$(curl -s https://nlnetlabs.nl/downloads/unbound/unbound-"${{ steps.GET_VERSIONS.outputs.UNBOUND_VERSION }}".tar.gz.sha256)" 2>/dev/null >> $GITHUB_OUTPUT
          fi 

      - name: Checkout source
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          
      - name: Import GPG key 
        id: IMPORT_GPG
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.BOT_GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_push_gpgsign: true
          trust_level: 5

      - name: Push buildvars to repository
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ steps.IMPORT_GPG.outputs.name }}
          GIT_AUTHOR_EMAIL: ${{ steps.IMPORT_GPG.outputs.email }}
          GIT_COMMITTER_NAME: ${{ steps.IMPORT_GPG.outputs.name }}
          GIT_COMMITTER_EMAIL: ${{ steps.IMPORT_GPG.outputs.email }}
        run: |
          UNBOUND_VERSION=${{ steps.GET_VERSIONS.outputs.UNBOUND_VERSION }} 
          echo UNBOUND_VERSION=$UNBOUND_VERSION > buildvars
          echo UNBOUND_DOCKER_IMAGE_VERSION="${UNBOUND_VERSION}-0" >> buildvars
          echo UNBOUND_SHA256=${{ steps.IS_UPDATE_AVAILABLE.outputs.UNBOUND_SHA256 }} >> buildvars
          echo IMAGE_BUILD_DATE=${{ steps.IS_UPDATE_AVAILABLE.outputs.IMAGE_BUILD_DATE }} >> buildvars
          git add buildvars
          git commit buildvars -m "CD Updated buildvars PFC"
          git push origin main
          exit 0
